# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lgm5770u')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lgm5770u')
    _lgm5770u = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lgm5770u', [dirname(__file__)])
        except ImportError:
            import _lgm5770u
            return _lgm5770u
        try:
            _mod = imp.load_module('_lgm5770u', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lgm5770u = swig_import_helper()
    del swig_import_helper
else:
    import _lgm5770u
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

Info = _lgm5770u.Info
Warning = _lgm5770u.Warning
Error = _lgm5770u.Error

def LGM5770U_new(address, name, connected_cb=None, log_cb=None):
    return _lgm5770u.LGM5770U_new(address, name, connected_cb, log_cb)
LGM5770U_new = _lgm5770u.LGM5770U_new

def get_address(t):
    return _lgm5770u.get_address(t)
get_address = _lgm5770u.get_address

def get_name(t):
    return _lgm5770u.get_name(t)
get_name = _lgm5770u.get_name

def delete(t):
    return _lgm5770u.delete(t)
delete = _lgm5770u.delete

def connect(t):
    return _lgm5770u.connect(t)
connect = _lgm5770u.connect

def is_connected(t):
    return _lgm5770u.is_connected(t)
is_connected = _lgm5770u.is_connected

def set_auto_reconnect(t, is_reconnect):
    return _lgm5770u.set_auto_reconnect(t, is_reconnect)
set_auto_reconnect = _lgm5770u.set_auto_reconnect

def set_reconnect_delay(t, delay_s):
    return _lgm5770u.set_reconnect_delay(t, delay_s)
set_reconnect_delay = _lgm5770u.set_reconnect_delay

def restart(t):
    return _lgm5770u.restart(t)
restart = _lgm5770u.restart

def read(t):
    return _lgm5770u.read(t)
read = _lgm5770u.read

def set_read_one_mode(t):
    return _lgm5770u.set_read_one_mode(t)
set_read_one_mode = _lgm5770u.set_read_one_mode

def set_wait_mode(t):
    return _lgm5770u.set_wait_mode(t)
set_wait_mode = _lgm5770u.set_wait_mode

def set_auto_read_mode(t):
    return _lgm5770u.set_auto_read_mode(t)
set_auto_read_mode = _lgm5770u.set_auto_read_mode

def set_auto_read_delay(t, delay_ms):
    return _lgm5770u.set_auto_read_delay(t, delay_ms)
set_auto_read_delay = _lgm5770u.set_auto_read_delay

def wait_till_ready(t):
    return _lgm5770u.wait_till_ready(t)
wait_till_ready = _lgm5770u.wait_till_ready

def cancel_read(t):
    return _lgm5770u.cancel_read(t)
cancel_read = _lgm5770u.cancel_read


import ctypes

py_connected_cb_type = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_char_p, ctypes.c_bool)
py_log_cb_type = ctypes.CFUNCTYPE(None, ctypes.c_int, ctypes.c_char_p, ctypes.c_char_p)

def new(address, name, on_connected = None, on_log = None):
    if on_connected:
        f = py_connected_cb_type(on_connected)
        f_ptr = ctypes.cast(f, ctypes.c_void_p).value
    else:
        f_ptr = 0
    if on_log:
        g = py_log_cb_type(on_log)
        g_ptr = ctypes.cast(g, ctypes.c_void_p).value
    else:
        g_ptr = 0
    return _lgm5770u.LGM5770U_new(address, name, f_ptr, g_ptr)

# This file is compatible with both classic and new-style classes.


